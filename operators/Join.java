package colgatedb.operators;

import colgatedb.DbException;
import colgatedb.transactions.TransactionAbortedException;
import colgatedb.tuple.Tuple;
import colgatedb.tuple.TupleDesc;

import java.util.NoSuchElementException;

/**
 * ColgateDB
 * @author Michael Hay mhay@colgate.edu
 * <p>
 * ColgateDB was developed by Michael Hay but borrows considerably from past
 * efforts including SimpleDB (developed by Sam Madden at MIT) and its predecessor
 * Minibase (developed at U. of Wisconsin by Raghu Ramakrishnan).
 * <p>
 * The contents of this file are either wholly the creation of Michael Hay or are
 * a significant adaptation of code from the SimpleDB project.  A number of
 * substantive changes have been made to meet the pedagogical goals of the cosc460
 * course at Colgate.  If this file contains remnants from SimpleDB, we are
 * grateful for Sam's permission to use and adapt his materials.
 */

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
    private boolean opened = false;
    private boolean alreadyHasNexted = false;
    private JoinPredicate jp;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple curTuple;
    private Tuple child1Tuple;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.jp = p;
        this.child1 = child1;
        TupleDesc td1 = child1.getTupleDesc();
        this.child2 = child2;
        TupleDesc td2 = child2.getTupleDesc();
        this.setTupleDesc(TupleDesc.merge(td1, td2));
        this.child1Tuple = null;
    }

    public JoinPredicate getJoinPredicate(){
        return this.jp;
    }



    @Override
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        opened = true;
        if (child1.hasNext()) {
            child1Tuple = child1.next();
        }
        else {
            child1Tuple = null;
        }
    }

    @Override
    public void close() {
        child1.close();
        child2.close();
        opened = false;
        this.child1Tuple = null;
    }

    @Override
    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        opened = true;
        if (child1.hasNext()) {
            child1Tuple = child1.next();
        }
        else {
            child1Tuple = null;
        }
    }

    @Override
    public boolean hasNext() throws DbException, TransactionAbortedException {
        if (child1 == null || child2 == null) {
            return false;
        }
        if (alreadyHasNexted) {
            //System.out.println("HERE12");
            return true;
        }
        if (opened) {
            while (child1Tuple != null) {
                //System.out.println("Child1Tuple != Null");
                while (child2.hasNext()) {
                    //System.out.println("Child2.hasNext()");
                    Tuple child2Tuple = child2.next();
                    if (jp.filter(child1Tuple, child2Tuple)) {
                        curTuple = concatTuples(child1Tuple, child2Tuple);
                        alreadyHasNexted = true;
                        return true;
                    }
                }
                if (child1.hasNext()) {
                    child1Tuple = child1.next();
                }
                else {
                    child1Tuple = null;
                }
                child2.rewind();
            }
            return false;
        }
        return false;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. The implementation is a simple nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    @Override
    public Tuple next() throws DbException, TransactionAbortedException,
            NoSuchElementException {
        if (hasNext()) {
            alreadyHasNexted = false;
            return curTuple;
        }
        throw new NoSuchElementException();
    }

    public Tuple concatTuples(Tuple t1, Tuple t2) throws TransactionAbortedException{
        TupleDesc td1 = t1.getTupleDesc();
        TupleDesc td2 = t2.getTupleDesc();
        TupleDesc td = TupleDesc.merge(td1, td2);
        Tuple newTuple = new Tuple(td);
        for (int i = 0; i < td1.numFields(); i++) {
            newTuple.setField(i, t1.getField(i));
        }
        for (int i = 0; i < td2.numFields(); i++) {
            newTuple.setField(i, t2.getField(i));
        }
        return newTuple;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length != 2) {
            throw new DbException("Expected two children");
        }
        child1 = children[0];
        child2 = children[1];
    }

}
